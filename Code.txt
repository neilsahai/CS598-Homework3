--------------Script for loading data----------------

import pandas as pd
from google.cloud import bigtable
from google.cloud.bigtable import row

# Load the CSV file
df_raw = pd.read_csv("Electric_Vehicle_Population_Data.csv")

# Normalize header names by stripping extra whitespace
df_raw.columns = [col.strip() for col in df_raw.columns]
print("Raw CSV row count:", df_raw.shape[0])  

# Select only the columns needed for Bigtable
# These columns are: "DOL Vehicle ID", "Make", "Model Year", "Electric Range", "City", "County"
df = df_raw[['DOL Vehicle ID', 'Make', 'Model Year', 'Electric Range', 'City', 'County']]

# Fill missing values instead of dropping rows.
# For text fields, we fill with an empty string; for numeric ones, we fill with 0.
df.loc[:, 'DOL Vehicle ID'] = df['DOL Vehicle ID'].fillna('')
df.loc[:, 'Make'] = df['Make'].fillna('').astype(str)
df.loc[:, 'Model Year'] = df['Model Year'].fillna(0)
df.loc[:, 'Electric Range'] = df['Electric Range'].fillna(0)
df.loc[:, 'City'] = df['City'].fillna('').astype(str)
df.loc[:, 'County'] = df['County'].fillna('').astype(str)

print("Row count after processing:", df.shape[0])

def get_row_key(row_data, index):
    key = str(row_data['DOL Vehicle ID']).strip()
    if key == '':
        return f"missing_{index}"
    return key


client = bigtable.Client(project='cs598-dmc-451320', admin=True)
instance = client.instance('ev-bigtable')
table = instance.table('ev-population')
COLUMN_FAMILY_ID = 'ev_info'

batch = []
batch_size = 100

# Process each row from the DataFrame and add it to a batch for mutation.
for index, row_data in df.iterrows():
    # Create the row key (using fallback if necessary)
    row_key = get_row_key(row_data, index)
    bt_row = table.direct_row(row_key)

    # Set the cell values and encode text as UTF-8 bytes.
    bt_row.set_cell(COLUMN_FAMILY_ID, 'make', str(row_data['Make']).encode('utf-8'))
    # Placeholder for 'model' (update as needed)
    bt_row.set_cell(COLUMN_FAMILY_ID, 'model', b'')
    
    # Convert 'Model Year' to integer, with a fallback on error.
    try:
        model_year = str(int(row_data['Model Year']))
    except Exception as e:
        print(f"Error converting Model Year for row {index} ({row_data['Model Year']}): {e}")
        model_year = "0"
    bt_row.set_cell(COLUMN_FAMILY_ID, 'model_year', model_year.encode('utf-8'))
    
    # Convert 'Electric Range' to integer, with a fallback on error.
    try:
        electric_range = str(int(row_data['Electric Range']))
    except Exception as e:
        print(f"Error converting Electric Range for row {index} ({row_data['Electric Range']}): {e}")
        electric_range = "0"
    bt_row.set_cell(COLUMN_FAMILY_ID, 'electric_range', electric_range.encode('utf-8'))
    
    bt_row.set_cell(COLUMN_FAMILY_ID, 'city', str(row_data['City']).encode('utf-8'))
    bt_row.set_cell(COLUMN_FAMILY_ID, 'county', str(row_data['County']).encode('utf-8'))

    batch.append(bt_row)

    # Write the batch to Bigtable when reaching the batch size.
    if len(batch) >= batch_size:
        table.mutate_rows(batch)
        batch.clear()

# Write any remaining rows in the final batch.
if batch:
    table.mutate_rows(batch)

print("Data loaded successfully.")


-----------------------Script for querying data-------------------------------------
from flask import Flask
import re
from google.cloud import bigtable

app = Flask(__name__)

# --- Bigtable setup ---
client = bigtable.Client(project='cs598-dmc-451320', admin=True)
instance = client.instance('ev-bigtable')
table = instance.table('ev-population')
CF = 'ev_info'

def fetch_all_rows():
    partial_rows = table.read_rows()
    partial_rows.consume_all()
    return list(partial_rows.rows.values())

@app.route('/rows', methods=['GET'])
def get_rows():
    rows = fetch_all_rows()
    return str(len(rows))

@app.route('/Best-BMW', methods=['GET'])
def best_bmw():
    count = 0
    for bt_row in fetch_all_rows():
        cells = bt_row.cells.get(CF, {})
        make_cells = cells.get(b'make', [])
        er_cells   = cells.get(b'electric_range', [])
        if not make_cells or not er_cells:
            continue

        make = make_cells[0].value.decode('utf-8').strip().lower()
        er_raw = er_cells[0].value.decode('utf-8').strip()
        er_num = re.sub(r'\D', '', er_raw)
        if make == 'bmw' and er_num and int(er_num) > 100:
            count += 1

    return str(count)

@app.route('/tesla-owners', methods=['GET'])
def tesla_owners():
    count = 0
    for bt_row in fetch_all_rows():
        cells = bt_row.cells.get(CF, {})
        make_cells = cells.get(b'make', [])
        city_cells = cells.get(b'city', [])
        if not make_cells or not city_cells:
            continue

        make = make_cells[0].value.decode('utf-8').strip().lower()
        city = city_cells[0].value.decode('utf-8').strip().lower()
        if make == 'tesla' and 'seattle' in city:
            count += 1

    return str(count)

@app.route('/update', methods=['GET','POST'])
def update_vehicle():
    vehicle_id = '257246118'
    bt_row = table.direct_row(vehicle_id)
    bt_row.set_cell(CF, 'electric_range', b'200')
    bt_row.commit()
    return "Success"

@app.route('/delete', methods=['GET','POST'])
def delete_old_records():
    to_delete = []
    for bt_row in fetch_all_rows():
        cells = bt_row.cells.get(CF, {})
        my_cells = cells.get(b'model_year', [])
        if not my_cells:
            continue

        my_raw = my_cells[0].value.decode('utf-8').strip()
        my_num = re.sub(r'\D', '', my_raw)
        if my_num and int(my_num) < 2014:
            rk = bt_row.row_key.decode('utf-8')
            dr = table.direct_row(rk)
            dr.delete()
            to_delete.append(dr)

    if to_delete:
        table.mutate_rows(to_delete)

    remaining = len(fetch_all_rows())
    return str(remaining)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)
